#--
######################################################################
#
# Copyright 2011 Andrew S. Townley
#
# Permission to use, copy, modify, and disribute this software for
# any purpose with or without fee is hereby granted, provided that
# the above copyright notices and this permission notice appear in
# all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHORS DISCLAIM ALL
# WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT SHALL THE
# AUTHORS BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
# NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# File:     html4_table_model_renderer.rb
# Created:  Wed 23 Nov 2011 16:50:30 GMT
#
#####################################################################
#++ 

require 'tagz'

module RubyMVC
  module Renderers

    # This class provides a very basic HTML4 renderer for
    # table models.  The HTML generated by this renderer does
    # not have any support for CSS, and will use a plethora of
    # in-line deprecated HTML tags to support older rendering
    # engines.

    class Html4TableModelRenderer
      include Tagz
      
      OPTIONS = { 
            :border => 1,
            :cellspacing => 0,
            :cellpadding => 3
      }.freeze
      
      TD_OPTIONS  = {
            :valign => "top"
      }.freeze

      def self.render(model, options = {})
        self.new.render(model, options)
      end

      def render(model, options = {})
        options = OPTIONS.merge(options)
        tagz {
          table_(options) {
            labels = model.labels
            build_header(model, labels, options)
            model.each { |row| build_row(labels, row) }
          }
        }
      end

    protected
      def build_header(model, cols, options = {})
        return if options[:headers] == false

        tr_ {
          cols.each do |col|
            th_(:align => "center", :valign => "bottom") {
              strong_ col[:label]
            }
          end
        }
      end

      def build_row(cols, row)
        tr_ {
          cols.each do |col|
            if(r = col[:renderer])
              tagz.concat r.render(self, row, col)
            else
              data = row[col[:key]]
              style = TD_OPTIONS.merge(col[:style] || {})
              weight = style.delete(:weight)
              td_(style) {
                if weight == "bold"
                  strong_ data
                else
                  data
                end
              }
            end
          end
        }
      end
    end

  end
end
